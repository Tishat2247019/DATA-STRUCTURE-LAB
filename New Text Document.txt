#include<bits/stdc++.h>
using namespace std;


struct Node {
int data;
Node *next;
};

Node *head = NULL;
Node *tail = NULL;

void enQue(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
    tail =newNode;
}
else{
    tail->next = newNode;
    tail = newNode;
}
}

void deQue(){
    Node *temp = head;
    head = head->next;
    delete(temp);

}

void printQueue(){
Node *temp = head;
while(temp!=NULL){
    cout<<temp->data<<endl;
    temp = temp->next;
}
cout<<".........."<<endl;
}

/*int stacksize(){
    int c = 0;
Node *temp = head;
while(temp!=NULL){
    c++;
    temp=temp->next;
}
return c;
}

int top(){
    return head->data;
}

int stacksum(){
int sum = 0;
Node *temp = head;
while(temp!=NULL){
    sum = sum+temp->data;
    temp= temp->next;
}
return sum;
}

insertatend(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
}
else{
        Node *temp = head;
    while(temp->next!=NULL){
        temp = temp->next;
    }
    temp->next = newNode;
}
}*/

int main(){
 enQue(10);
 enQue(20);
 enQue(30);
 enQue(40);
 printQueue();
 deQue

 

return 0;
}

 

#include<bits/stdc++.h>
using namespace std;


struct Node {
int data;
Node *next;
};

Node *head = NULL;

void insertatbegin(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
}
else{
    newNode->next = head;
    head = newNode;
}
}

void removefrombegin(){
    Node *temp = head;
    head = head->next;
    delete(temp);

}

void traversal(){
Node *temp = head;
while(temp!=NULL){
    cout<<temp->data<<endl;
    temp = temp->next;
}
cout<<".........."<<endl;

}


int main(){
    //Node *head = NULL;
    insertatbegin(10);
    insertatbegin(20);
    insertatbegin(30);
    insertatbegin(40);
    removefrombegin();
    removefrombegin();
    traversal();


return 0;
}

 

#include<bits/stdc++.h>
using namespace std;


struct Node {
int data;
Node *next;
};

Node *head = NULL;

void push(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
}
else{
    newNode->next = head;
    head = newNode;
}
}

void pop(){
    Node *temp = head;
    head = head->next;
    delete(temp);

}

void printstack(){
Node *temp = head;
while(temp!=NULL){
    cout<<temp->data<<endl;
    temp = temp->next;
}
cout<<".........."<<endl;
}

int stacksize(){
    int c = 0;
Node *temp = head;
while(temp!=NULL){
    c++;
    temp=temp->next;
}
return c;
}

int top(){
    return head->data;
}

int stacksum(){
int sum = 0;
Node *temp = head;
while(temp!=NULL){
    sum = sum+temp->data;
    temp= temp->next;
}
return sum;
}

insertatend(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
}
else{
        Node *temp = head;
    while(temp->next!=NULL){
        temp = temp->next;
    }
    temp->next = newNode;
}
}

int main(){
 push(10);
 push(20);
 push(30);
 push(40);
 push(50);
 printstack();
 insertatend(60);
 printstack();
 /*cout<<stacksize()<<endl;
 cout<<top()<<endl;
 cout<<stacksum()<<endl;
 cout<<stacksum()/(double)stacksize()<<endl;
 //pop();
 //printstack();*/

 

return 0;
}

 

#include<bits/stdc++.h>
using namespace std;


struct Node {
int data;
Node *next;
};

Node *head = NULL;
Node *tail = NULL;

void enQueue(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
    tail =newNode;
}
else{
    tail->next = newNode;
    tail = newNode;
}
}

void deQue(){
    Node *temp = head;
    head = head->next;
    delete(temp);

}

void deleteFromEnd(){
    Node *temp = head;
    Node *temp1;
    while(temp->next!=NULL){
        temp1=temp;
        temp=temp->next;
    }
    temp1->next = NULL;
    delete(temp);

}

void searchAndDelete(){

}


void printQueue(){
Node *temp = head;
while(temp!=NULL){
    cout<<temp->data<<endl;
    temp = temp->next;
}
cout<<".........."<<endl;
}

/*int stacksize(){
    int c = 0;
Node *temp = head;
while(temp!=NULL){
    c++;
    temp=temp->next;
}
return c;
}

int top(){
    return head->data;
}

int stacksum(){
int sum = 0;
Node *temp = head;
while(temp!=NULL){
    sum = sum+temp->data;
    temp= temp->next;
}
return sum;
}

insertatend(int value){
Node *newNode = new Node();
newNode->data=value;
newNode->next = NULL;
if(head ==NULL){
    head = newNode;
}
else{
        Node *temp = head;
    while(temp->next!=NULL){
        temp = temp->next;
    }
    temp->next = newNode;
}
}*/

int main(){
 enQueue(10);
 enQueue(20);
 enQueue(30);
 enQueue(40);
 printQueue();
 deleteFromEnd();
 printQueue();

 


return 0;
}

